library (pwr)
install.packages("pwr")
library("pwr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pwr.t2n.test (n1=1000, n2=3000, d = 0.05, sig.leve = 0.05)
pwr.t2n.test (n1=1000, n2=3000, d = 0.1, sig.leve = 0.05)
pwr.t2n.test (n1=2500, n2=2500, d = 0.1, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=3000, d = 0.3, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=3000, d = 0.2, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=3000, d = 0.1, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=3000, d = 0.15, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=3000, d = 0.18, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=3000, d = 0.17, sig.leve = 0.05)
pwr.t2n.test (n1=300, n2=4000, d = 0.17, sig.leve = 0.05)
pwr.t2n.test (n1=330, n2=4000, d = 0.17, sig.leve = 0.05)
pwr.t2n.test (n1=330, n2=4000, d = 0.17, sig.leve = 0.05)
install.packages ('samplesize')
library("samplesize", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
n.t.test (power = 0.8, alpha = 0.05, mean.diff = 30, sd1 = 30, sd2 =30)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 30, sd1 = 30, sd2 =30)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 30, sd1 = 30, sd2 =30)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 10, sd1 = 30, sd2 =30)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 9, sd1 = 30, sd2 =30)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 12, sd1 = 24, sd2 =31)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 5, sd1 = 7, sd2 =6)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 1, sd1 = 7, sd2 =6)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 2, sd1 = 7, sd2 =6)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 3, sd1 = 7, sd2 =6)
n.ttest (power = 0.8, alpha = 0.05, mean.diff = 30, sd1 = 30, sd2 =20)
n.ttest (power = 0.9, alpha = 0.05, mean.diff = 30, sd1 = 30, sd2 =20)
n.ttest (power = 0.9, alpha = 0.01, mean.diff = 30, sd1 = 30, sd2 =20)
library("pwr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("pwr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("pwr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
pwr.t.test(n=300, d = 10, sd = 30)
power.t.test(delta=10, sd=20, sig.level=0.05, type="two.sample", alternative="two.sided", power=.8)
power.t.test(d=10, sd=20, sig.level=0.05, type="two.sample", alternative="two.sided", power=.8)
clear
install.packages("KernSmooth")
library (KernSmooth)
samplesize::n.ttest (power = 0.8, alpha = 0.05, mean.diff = 10, sd1=20, sd2 = 20)
power.t.test(n=300, delta = 10, sd=20)
power.t.test(n=64, delta = 10, sd=20)
x <- c (1,2,3,4)
str (c)
str (x)
for (i in 1:3) print(x[i])
for (i in 1:4) print(x[i])
for (letter in 1:4) print(x[i])
for (i in seq_along(x)) print(x[i])
x <- matrix (1:6,2,3)
x
for (i in seq_len(nrow(x))) {}
for (i in seq_len(nrow(x))) { for j in seq_len(nocol(x)){printx(i,j)}}
for (i in seq_len(nrow(x))) { for j in seq_len(ncol(x)){printx(i,j)}}
for (i in seq_len(nrow(x))) {for (j in seq_len(ncol(x)) {printx(i,j)}}
for (i in seq_len(nrow(x))) {for (j in seq_len(ncol(x))) {printx(i,j)}}
for (i in seq_len(nrow(x))) {for (j in seq_len(ncol(x))) {print (x[i,j])}}
count <c(1:10)
count <- c(1:10)
while (count<10) {pint (count) count <- count+1}
while (count<10) {pint (count) {count <- count+1}
while (count<10) {pint (count) {count <- count+1}}
while (count<10) {
pint (count)
count <- count+1}
count
count <- 0
while (count<10) {
pint (count)
count <- count+1}
while (count<10) {
print (count)
count <- count+1}
while (count<10) {
x <- count
count <- count+1}
x
count <- 2
while (count <10) {
print (count)
count <- count +2
}
coin <- rbinom (1,1,0.5)
coint
coin
coin
coin
z <- 5
while (z>=3 && z<=10) {
print (z)
count <- rbinom (1,1,0.5)
if (coint ==1) {
z <- z+1
}
else {
z<- z-1 }
}
}
z <- 5
while (z>=3 && z<=10) {
print (z)
count <- rbinom (1,1,0.5)
if (coint ==1) {
z <- z+1
}else {
z<- z-1
}
}
z <- 5
while (z>=3 && z<=10) {
print (z)
coin <- rbinom (1,1,0.5)
if (coin ==1) {
z <- z+1
}else {
z<- z-1
}
}
computeestimate()
computestimate()
computeEstimate()
computeEstimate()
f <- function (a,b){
a^2 +b^2
}
f <- function (2,3)
f (2,3)
args (paste)
f <- function (a,b){
a^2 +b^2/z
}
f(1,3)
z=4
f(1,3)
make.power <- function(n){pow<-function(x^n)}
make.power <- function(n){pow<-function(x){x^n}pow}
make.power <- function (n){
pow <- function(x){
x^n
}
pow
}
make.power(3)
cube = make.power(3)
cube(2)
ls (environment(cube))
get ('n',environment(cube))
y<-10
test <- function (x){
y<-2
x+y
}
test(2)
> y<-10
> test <- function (x){
+   y<-2
+   x+y+g {
g <- y+2
}
+ }
> y<-10
> test <- function (x){
+   y<-2
+   x+y+g(x)
}
g <- function (x) {
y+2
}
> y<-10
> test <- function (x){
+   y<-2
+   x+y+g(x)
} g <- function (x) {
y+2
}
seq (0.5, 1.5, len = 10)
x <- 1:10
y<- ab
y<- rnorm
apply(x,y)
apply(x,mean)
apply(x,mean(x))
apply(x, function (x) length (x[x>2])
sapply(1:3, function(x) x^2)
sapply(1:3, function(x) x^2)
apply(x, 2, length(x[x<0]))
apply(x, 2, length(y[y<0]))
a<-1
f <- function(x,y){
x <- 1
x+y
}
f(1)
f(1,2)
weekdays
weekdays()
Sys.time()
x <- sys.time()
x <- Sys.time()
p<-as.POSIXlt(x)
p$isdst
p$wday
p$yday
?strptime
?Reduce
swirl
library(swirl)
swirl
swirl()
sys.date()
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function <- function(x) {
x
}
submit()
submit
submit()
submit()
boring_function('My first function!')
boring_function
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/',
getOption('repos')),
type = 'source')
IRkernel::installspec()
install.packages(rzmq)
install.packages('rzmq')
IRkernel::installspec()
install.packages (dplyr)
install.packages ('dplyr')
install.packages('pwr')
pwr.anova.test (k=4, n=40, f=0.3, sig.level = 0.05)
?pwr
library(pwr)
pwr.anova.test (k=4, n=40, f=0.3, sig.level = 0.05)
pwr.anova.test (k=4, n=40, f=0.03, sig.level = 0.05)
pwr.anova.test (k=4, n=40, f=1.03, sig.level = 0.05)
install.packages ('compute.esâ€™)
install.packages ('compute.es')
library(compute.es)
detach("package:pwr", unload=TRUE)
a.mes2(985,955,29)
a.mes2(m.1.adj=985,m.2.adj=955,s.pooled = 29, n.1 = 47, n.2 = 47)
des(d = 30, n.1 = 47, n.2 = 47)
mes(m.1=985, m.2=955, sd.1=29, sd.2=30, n.1=47, n.2=47,
level = 95, cer = 0.2, dig = 2, verbose = TRUE, id=NULL, data=NULL)
pwr.anova.test (k=4, n=40, f=0.53, sig.level = 0.05)
library(pwr)
library(pwr)
pwr.anova.test (k=4, n=40, f=0.53, sig.level = 0.05)
library('swirl')
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){length(x)}, c(8,4,0))
info()
evaluate(function(x){x[length]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
a <- rnorm(10)
a
a[i]
a[1]
a <- matrix (2:3)
a
a <- matrix (2:5)
a
a <- matrix (2:5, byrow = TRUE)
a
a <- matrix (2:5, nrow = 2, ncol = 2)
a
row.names(a)<- c('gender', 'age')
a
col.names (a) <- c('x','y')
colnames (a) <- c('x','y')
a
a$gender[1]
a <- matrix (2:3, nrow = 2, ncol = 2, row.names(c('gender', 'male')), colnames(c('x','y')))
nrun <- 2
a <- matrix (2:3, nrow = 2, ncol = 2)
row.names(c('gender', 'male'))
colnames(c('x','y'))
View(a)
nrun <- 2
a <- matrix (2:3, nrow = 2, ncol = 2)
row.names (a) <- c('gender', 'male')
colnames(a) <- c('x','y')
View(a)
a$z <- NA
a
as.matrix(a)
nrun <- 2
a <- matrix (2:3, nrow = 2, ncol = 2)
row.names (a) <- c('gender', 'male')
colnames(a) <- c('x','y')
for (i in nrun){
}
for (i in nrun){
t <- a$x [i]
u <-2*t
}
age <- 10
candles <- c()
for (i in age){
c <- 0
for (j in i){
c <- c+J
}
candles <- c(candles,c)
}
print (candles)}
age <- 10
candles <- c()
for (i in age){
c <- 0
for (j in i){
c <- c+J
}
candles <- c(candles,c)
print (candles)
}
age <- 10
candles <- c()
for (i in age){
c <- 0
for (j in i){
c <- c+j
}
candles <- c(candles,c)
print (candles)
}
for (i in age){
c <- 0
for (j in 0:i){
c <- c+j
}
candles <- c(candles,c)
print (candles)
}
age <- 10
candles <- c()
for (i in age){
c <- 0
for (j in 0:i){
c <- c+j
}
candles <- c(candles,c)
print (candles)
}
age <- c(10,12,13,14)
candles <- c()
for (i in age){
c <- 0
for (j in 0:i){
c <- c+j
}
candles <- c(candles,c)
print (candles)
}
history()
library("colorspace", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
choose_palette()
pal <- choose_palette()
pal <- choose_palette()
pal <- choose_palette()
library(colorspace)
pal <- choose_palette()
pal <- choose_palette()
View(pal)
View(pal)
setwd("~/Coursera/Exploratory data analysis/Week4/exdata-data-NEI_data")
if(!exists("NEI")){
NEI <- readRDS("./data/summarySCC_PM25.rds")
}
if(!exists("SCC")){
SCC <- readRDS("./data/Source_Classification_Code.rds")
}
# merge the two data sets
if(!exists("NEISCC")){
NEISCC <- merge(NEI, SCC, by="SCC")
}
library(ggplot2)
# Across the United States, how have emissions from coal combustion-related sources changed from 1999-2008?
# fetch all NEIxSCC records with Short.Name (SCC) Coal
coalMatches  <- grepl("coal", NEISCC$Short.Name, ignore.case=TRUE)
subsetNEISCC <- NEISCC[coalMatches, ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subsetNEISCC, sum)
if(!exists("NEI")){
NEI <- readRDS("summarySCC_PM25.rds")
}
if(!exists("SCC")){
SCC <- readRDS("Source_Classification_Code.rds")
}
# merge the two data sets
if(!exists("NEISCC")){
NEISCC <- merge(NEI, SCC, by="SCC")
}
q
View(NEI)
View(SCC)
if(!exists("NEISCC")){
NEISCC <- merge(NEI, SCC, by="SCC")
}
coalMatches  <- grepl("coal", NEISCC$Short.Name, ignore.case=TRUE)
subsetNEISCC <- NEISCC[coalMatches, ]
aggregatedTotalByYear <- aggregate(Emissions ~ year, subsetNEISCC, sum)
png("plot4_1.png", width=640, height=480)
g <- ggplot(aggregatedTotalByYear, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from coal sources from 1999 to 2008')
print(g)
g
png("plot4_1.png", width=640, height=480)
library(ggplot2)
g <- ggplot(aggregatedTotalByYear, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("year") +
ylab(expression('Total PM'[2.5]*" Emissions")) +
ggtitle('Total Emissions from coal sources from 1999 to 2008')
print(g)
g
dev.off()
NEI_SCC <- merge(NEI, SCC, by="SCC")
coal <- grepl("coal", NEI_SCC$Short.Name, ignore.case=TRUE)
NEISCC_coal <- NEI_SCC[coal, ]
TotalPerYear_Coal <- aggregate(Emissions ~ year, NEISCC_coal, sum)
g <- ggplot(TotalPerYear_Coal, aes(factor(year), Emissions))
g <- g + geom_bar(stat="identity") +
xlab("Year") +
ylab(expression('Total PM 2.5 Emission Per Year (Tons)')) +
ggtitle('Emission due to Coal combustion per year in USA')
g
ggsave(g, file = 'plot4.png')
